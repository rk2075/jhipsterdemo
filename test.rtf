
<div>
    <form name="editForm" role="form" novalidate (ngSubmit)="save()" #editForm="ngForm">
        <div class="row">
            <div class="col-md-8 offset-md-1">
                <ngb-tabset>
                    <ngb-tab title="Doodle Entry Info">
                        <ng-template ngbTabContent>
                            <p></p>
                        </ng-template>
                    </ngb-tab>
                    <ngb-tab>
                        <ng-template ngbTabTitle>Products Details</ng-template>
                        <ng-template ngbTabContent>
                            <p></p>
                        </ng-template>
                    </ngb-tab>
                    <ngb-tab title="Income Stmt Info">
                        <ng-template ngbTabContent>
                            <p></p>
                        </ng-template>
                    </ngb-tab>
                    <ngb-tab title="Balance Sheet Info">
                        <ng-template ngbTabContent>
                            <p></p>
                        </ng-template>
                    </ngb-tab>
                </ngb-tabset>
                <div class="alert alert-success" *ngIf="success" jhiTranslate="register.messages.success">
                    <strong>Doodil Entry saved</strong>
                </div>

                <div class="alert alert-danger" *ngIf="error" jhiTranslate="register.messages.error.fail">
                    <strong>System error</strong> Please try again later.
                </div>
            </div>
        </div>
        <div class="col-md-8 offset-md-1">
            <jhi-alert-error></jhi-alert-error>
            <div class="form-group" [hidden]="!doodilEntry.id">
                <label for="id" jhiTranslate="global.field.id">ID</label>
                <input type="text" class="form-control" id="id" name="id"
                       [(ngModel)]="doodilEntry.id" readonly />
            </div>
            <div class="form-group">
                <label class="form-control-label" jhiTranslate="doodilApp.doodilEntry.name" for="field_name">Name</label>
                <input type="text" class="form-control" name="name" id="field_name"
                       [(ngModel)]="doodilEntry.name"  />
            </div>
            <div class="form-group">
                <label class="form-control-label" jhiTranslate="doodilApp.doodilEntry.desc" for="field_desc">Desc</label>
                <input type="text" class="form-control" name="desc" id="field_desc"
                       [(ngModel)]="doodilEntry.desc"  />
            </div>
            <div class="form-group">
                <label class="form-control-label" jhiTranslate="doodilApp.doodilEntry.period" for="field_period">Period</label>
                <input type="text" class="form-control" name="period" id="field_period"
                       [(ngModel)]="doodilEntry.period"  />
            </div>
            <div class="form-group">
                <label class="form-control-label" jhiTranslate="doodilApp.doodilEntry.createTime" for="field_createTime">Create Time</label>
                <div class="d-flex">
                    <input id="field_createTime" type="datetime-local" class="form-control" name="createTime" [(ngModel)]="doodilEntry.createTime"
                    />
                </div>
            </div>
            <div class="form-group">
                <label class="form-control-label" jhiTranslate="doodilApp.doodilEntry.updateTime" for="field_updateTime">Update Time</label>
                <div class="d-flex">
                    <input id="field_updateTime" type="datetime-local" class="form-control" name="updateTime" [(ngModel)]="doodilEntry.updateTime"
                    />
                </div>
            </div>

            <div class="form-group">
                <label jhiTranslate="doodilApp.doodilEntry.user" for="field_user">User</label>
                <select class="form-control" id="field_user" name="user" [(ngModel)]="doodilEntry.userId" >
                    <option [ngValue]="null"></option>
                    <option [ngValue]="userOption.id" *ngFor="let userOption of users; trackBy: trackUserById">{{userOption.login}}</option>
                </select>
            </div>
            <div class="form-group">
                <label jhiTranslate="doodilApp.doodilEntry.dePeriod" for="field_dePeriod">De Period</label>
                <select class="form-control" id="field_dePeriod" name="dePeriod" [(ngModel)]="doodilEntry.dePeriodId" >
                    <option [ngValue]="null"></option>
                    <option [ngValue]="doodilEntryPeriodsOption.id" *ngFor="let doodilEntryPeriodsOption of doodilentryperiods; trackBy: trackDoodilEntryPeriodsById">{{doodilEntryPeriodsOption.quarterName}}</option>
                </select>
            </div>
            <div class="form-group pull-right">
                <button class="btn btn-primary" [routerLink]="['../data-list']">
                    <span class="fa fa-cancel"></span>&nbsp;<span jhiTranslate="entity.action.cancel">Cancel</span>
                </button>
                <button type="submit" [disabled]="editForm.form.invalid || isSaving" class="btn btn-primary">
                    Save and Continue
                </button>
            </div>
        </div>
    </form>
</div>

process-chains-dialog.component.html
<form name="editForm" role="form" novalidate (ngSubmit)="save()" #editForm="ngForm">

    <div class="modal-header">
        <h4 class="modal-title" id="myGenProcessChainsLabel" jhiTranslate="doodilApp.genProcessChains.home.createOrEditLabel">Create or edit a Gen Process Chains</h4>
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"
                (click)="clear()">&times;</button>
    </div>
    <div class="modal-body">
        <jhi-alert-error></jhi-alert-error>
        <div class="form-group" [hidden]="!genProcessChains.id">
            <label for="id" jhiTranslate="global.field.id">ID</label>
            <input type="text" class="form-control" id="id" name="id"
                   [(ngModel)]="genProcessChains.id" readonly />
        </div>
        <div class="btn-group" ngbDropdown keyboardNav="true">
            <button id="dropdown-list" type="button" class="btn btn-default" ngbDropdownToggle>
                Select Process Chain<span class="caret"></span>
            </button>
            <ul *ngFor="let genProcessChains of genProcessChains" class="dropdown-menu" role="menu" aria-labelledby="dropdown-keyboard-access" ngbDropdownMenu>
                 <li role="menuitem"><a class="dropdown-item" (click)="getFormulas(genProcessChains)">{{genProcessChains.chainName}}</a></li>
            </ul>
        </div>
        <div class="table-responsive" *ngIf="genProcessChainFormulas">
            <table class="table">
                <tbody>
                <div *ngFor="let gpChainFormula of processChainFormulas; index as i">
                        <tr><td><b>Step {{i + 1}} : </b></td>
                            <span *ngFor="let formulaSplit of gpChainFormula.formulaSplit; index as j">
                    <td>{{formulaSplit.key}}<br/>
                        <span *ngIf="formulaSplit.operator != 'Y' && formulaSplit.value == 'I'">
                            <input type="text" name="formulaSplit">
                        </span>
                        <span *ngIf="formulaSplit.operator != 'Y' && formulaSplit.value == 'D'">
                            <input type="text" name="formulaSplit" readonly>
                        </span>
                    </td>
                        </span>
                        </tr>
                </div>
                </tbody>
            </table>
        </div>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal" (click)="clear()">
            <span class="fa fa-ban"></span>&nbsp;<span jhiTranslate="entity.action.cancel">Cancel</span>
        </button>
        <button type="submit" [disabled]="editForm.form.invalid || isSaving" class="btn btn-primary">
            <span class="fa fa-save"></span>&nbsp;<span jhiTranslate="entity.action.save">Save</span>
        </button>
    </div>
</form>

data-entry-products.component.html
<div>
    <ngb-tabset>
        <ngb-tab title="Doodle Entry Info">
            <ng-template ngbTabContent>
                <p></p>
            </ng-template>
        </ngb-tab>
        <ngb-tab>
            <ng-template ngbTabTitle>Products Details</ng-template>
            <ng-template ngbTabContent>
                <p></p>
            </ng-template>
        </ngb-tab>
        <ngb-tab title="Income Stmt Info">
            <ng-template ngbTabContent>
                <p></p>
            </ng-template>
        </ngb-tab>
        <ngb-tab title="Balance Sheet Info">
            <ng-template ngbTabContent>
                <p></p>
            </ng-template>
        </ngb-tab>
    </ngb-tabset>
    <jhi-alert></jhi-alert>
    <div class="row">
    </div>
    <br/>
    <div class="table-responsive" *ngIf="productServiceDefs">
        <table class="table table-striped">
            <thead>
            <tr jhiSort [(predicate)]="predicate" [(ascending)]="reverse" [callback]="reset.bind(this)">
                <th jhiSortBy="id"><span jhiTranslate="global.field.id">ID</span> <span class="fa fa-sort"></span></th>
                <th jhiSortBy="name"><span jhiTranslate="doodilApp.productServiceDef.name">Name</span> <span class="fa fa-sort"></span></th>
                <th jhiSortBy="majorCategory"><span jhiTranslate="doodilApp.productServiceDef.majorCategory">Major Category</span> <span class="fa fa-sort"></span></th>
                <th jhiSortBy="minorCategory"><span jhiTranslate="doodilApp.productServiceDef.minorCategory">Minor Category</span> <span class="fa fa-sort"></span></th>
                <th jhiSortBy="seasons"><span jhiTranslate="doodilApp.productServiceDef.seasons">Seasons</span> <span class="fa fa-sort"></span></th>
                <th jhiSortBy="types"><span jhiTranslate="doodilApp.productServiceDef.types">Types</span> <span class="fa fa-sort"></span></th>
                <th jhiSortBy="make"><span jhiTranslate="doodilApp.productServiceDef.make">Make</span> <span class="fa fa-sort"></span></th>
                <th jhiSortBy="grade"><span jhiTranslate="doodilApp.productServiceDef.grade">Grade</span> <span class="fa fa-sort"></span></th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Cost</th>
                <th></th>
            </tr>
            </thead>
            <tbody infinite-scroll (scrolled)="loadPage(page + 1)" [infiniteScrollDisabled]="page >= links['last']" [infiniteScrollDistance]="0">
            <tr *ngFor="let productServiceDef of productServiceDefs ;trackBy: trackId">
                <td><a [routerLink]="['../product-service-def', productServiceDef.id ]">{{productServiceDef.id}}</a></td>
                <td>{{productServiceDef.name}}</td>
                <td>{{productServiceDef.majorCategory}}</td>
                <td>{{productServiceDef.minorCategory}}</td>
                <td>{{productServiceDef.seasons}}</td>
                <td>{{productServiceDef.types}}</td>
                <td>{{productServiceDef.make}}</td>
                <td>{{productServiceDef.grade}}</td>
                <td>
                    <button type="submit"
                            [routerLink]="['/', { outlets: { popup: 'data-entry-chains-list'} }]"
                            replaceUrl="true" class="btn btn-primary btn-sm">
                        <span class="fa fa-pencil"></span>
                        <span class="hidden-md-down">Add Quantity</span>
                    </button>
                </td>
                <td>
                    <button type="submit" [routerLink]="['../data-entry/'+ productServiceDef.id + '/edit']"
                            replaceUrl="true" class="btn btn-primary btn-sm">
                        <span class="fa fa-pencil"></span>
                        <span class="hidden-md-down">Add Price</span>
                    </button>
                </td>
                <td>
                    <button type="submit" [routerLink]="['../data-entry/'+ productServiceDef.id + '/edit']"
                            replaceUrl="true" class="btn btn-primary btn-sm">
                        <span class="fa fa-pencil"></span>
                        <span class="hidden-md-down">Add Cost</span>
                    </button>
                </td>
            </tr>
            </tbody>
        </table>
    </div>
</div>

process-chains-dialog.component.ts
        import { Component, OnInit, OnDestroy } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Response } from '@angular/http';

import { Observable } from 'rxjs/Rx';
import { NgbActiveModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';
import { JhiEventManager, JhiAlertService } from 'ng-jhipster';
import { ITEMS_PER_PAGE, Principal, ResponseWrapper } from '../../shared';

import { ProcessVars } from '../../entities/process-vars/process-vars.model';
import { ProcessVarsService } from '../../entities/process-vars/process-vars.service';
import { GenProcessChainFormula } from '../../entities/gen-process-chain-formula/gen-process-chain-formula.model';
import { GenProcessChains } from '../../entities/gen-process-chains/gen-process-chains.model';
import { ProcessChainsPopupService } from './process-chains-popup.service';
import { GenProcessChainsService } from '../../entities/gen-process-chains/gen-process-chains.service';
import { GenProcessChainFormulaService } from '../../entities/gen-process-chain-formula/gen-process-chain-formula.service';
import { ProcessChainsFormula } from './process-chains-formula.model';
import { KeyValue } from './key-value.model';

@Component({
    selector: 'jhi-gen-process-chains-dialog',
    templateUrl: './process-chains-dialog.component.html'
})
export class ProcessChainsDialogComponent implements OnInit {

    processVars: ProcessVars[];
    genProcessChainFormulas: GenProcessChainFormula[];
    genProcessChains: GenProcessChains;
    authorities: any[];
    isSaving: boolean;
    processChainFormulas: ProcessChainsFormula[];
    processChainFormula: ProcessChainsFormula;
    keyValue: KeyValue;

    constructor(
        public activeModal: NgbActiveModal,
        private alertService: JhiAlertService,
        private genProcessChainsService: GenProcessChainsService,
        private genProcessChainFormulaService: GenProcessChainFormulaService,
        private processVarsService: ProcessVarsService,
        private eventManager: JhiEventManager
    ) {

    }

    ngOnInit() {
        this.isSaving = false;
        this.authorities = ['ROLE_USER', 'ROLE_ADMIN'];
        this.loadProcessChains();
        this.processChainFormulas = new Array();
        this.loadProcessVars();
    }

    loadProcessVars() {
        this.processVarsService.query().subscribe(
            (res: ResponseWrapper) => {
            this.processVars = res.json;
            },
            (res: ResponseWrapper) => this.onError(res.json)
        );
    }

    loadProcessChains() {
        this.genProcessChainsService.query().subscribe(
            (res: ResponseWrapper) => {
                this.genProcessChains = res.json;
            },
            (res: ResponseWrapper) => this.onError(res.json)
        );
    }

    getFormulas(genProcessChain){
        this.genProcessChainFormulaService.query('gpChainsIdId=' + genProcessChain.id).subscribe(
            (res: ResponseWrapper) => {
                this.genProcessChainFormulas = res.json;
                this.splitFormula();
            },
            (res: ResponseWrapper) => this.onError(res.json)
        );
    }

    splitFormula(){
        let token = '';
        for (var item of this.genProcessChainFormulas) {
            this.processChainFormula = new ProcessChainsFormula();
            this.processChainFormula.formula = item.formula;
            let fSplits = new Array();
            for (var char of item.formula) {
                if(char == '+' || char == '-' || char == '%' || char == '*' || char == ')' || char == '(' || char == '='){
                    token = token.replace(/\s/g, '');
                    if(typeof token!='undefined' && token){
                       fSplits.push(this.getKeyValue(token));
                    }
                    fSplits.push(this.getKeyValue(char));
                    token = '';
                }
                else{
                    token = token + char;
                }
            }
            fSplits.push(this.getKeyValue(token));
            token = '';
            this.processChainFormula.formulaSplit = fSplits;
            this.processChainFormulas.push(this.processChainFormula);
        }
        console.log('........splitting done............');
        console.log(this.processChainFormulas);
    }

    clear() {
        this.activeModal.dismiss('cancel');
    }

    save() {
        this.isSaving = true;
        if (this.genProcessChains.id !== undefined) {
            this.subscribeToSaveResponse(
                this.genProcessChainsService.update(this.genProcessChains), false);
        } else {
            this.subscribeToSaveResponse(
                this.genProcessChainsService.create(this.genProcessChains), true);
        }
    }

    private subscribeToSaveResponse(result: Observable<GenProcessChains>, isCreated: boolean) {
        result.subscribe((res: GenProcessChains) =>
            this.onSaveSuccess(res, isCreated), (res: Response) => this.onSaveError(res));
    }

    private onSaveSuccess(result: GenProcessChains, isCreated: boolean) {
        this.alertService.success(
            isCreated ? 'doodilApp.genProcessChains.created'
            : 'doodilApp.genProcessChains.updated',
            { param : result.id }, null);

        this.eventManager.broadcast({ name: 'genProcessChainsListModification', content: 'OK'});
        this.isSaving = false;
        this.activeModal.dismiss(result);
    }

    private onSaveError(error) {
        try {
            error.json();
        } catch (exception) {
            error.message = error.text();
        }
        this.isSaving = false;
        this.onError(error);
    }

    private onError(error) {
        this.alertService.error(error.message, null, null);
    }

    private checkOperator(arg){
        if(arg == '+' || arg == '-' || arg == '%' || arg == '*' || arg == ')' || arg == '(' || arg == '='){
            return true;
        }
        else {
            return false;
        }
    }

    private checkInputOrDerivedVar(arg){
        for(let processVar of this.processVars){
            if(processVar.varName == arg){
                console.log(arg);
                console.log(processVar);
                if(processVar.category == 'Input'){
                    return 'I';
                }
                else{
                    return 'D';
                }
            }
        }
    }
    private getKeyValue(arg){
        let keyValue = new KeyValue();
        keyValue.key = arg;
        if(this.checkOperator(arg)){
            keyValue.operator='Y';
            keyValue.value='N';
        }
        else if(this.checkInputOrDerivedVar(arg) == 'I'){
            keyValue.operator='N';
            keyValue.value='I';
        }
        else {
            keyValue.operator='N';
            keyValue.value='D';
        }
        return keyValue;
    }
}

@Component({
    selector: 'jhi-gen-process-chains-popup',
    template: ''
})
export class ProcessChainsPopupComponent implements OnInit, OnDestroy {

    modalRef: NgbModalRef;
    routeSub: any;

    constructor(
        private route: ActivatedRoute,
        private genProcessChainsPopupService: ProcessChainsPopupService
    ) {}

    ngOnInit() {
        this.routeSub = this.route.params.subscribe((params) => {
            if ( params['id'] ) {
                this.modalRef = this.genProcessChainsPopupService
                    .open(ProcessChainsDialogComponent, params['id']);
            } else {
                this.modalRef = this.genProcessChainsPopupService
                    .open(ProcessChainsDialogComponent);
            }
        });
    }

    ngOnDestroy() {
        this.routeSub.unsubscribe();
    }
}

index.ts
export * from './data-list.component';
export * from './data-entry.component';
export * from './data-entry-products.component';
export * from './data-entry.route';
export * from './process-chains-dialog.component';
export * from './process-chains-popup.service';
export * from './process-chains-formula.model';
export * from './key-value.model';

key-value.model.ts

import { BaseEntity } from './../../shared';

export class KeyValue implements BaseEntity {
    constructor(
        public key?: string,
        public value?: string,
        public operator?: string,
    ) {
    }
}


        </div>
